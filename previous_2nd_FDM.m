%**************************************************************************% This matlab code will illustrate the realization of the previous second-% order full discretization method. The following code can be found in % Ref. [26]. Some Codes are updated since quadratic polynomial interpolation% are used for approximation of the delayed state items here. After running% the code, you wll see the stability lobes prediction of the slot milling % process (a/D=1), as shown in the lower left of table 1 in our manuscript.%**************************************************************************close all;clear all;clc;tic% the modal parameters are as follows, which can also be found in Ref.[14]N=2;      % number of teethKt=6e8;   % tangential cutting force coefficient (N/m^2)Kn=2e8;   % normal cutting force coefficient (N/m^2)w0=922*2*pi;   % angular natural frequency (rad/s)zeta=0.011;    % relative damping (1)m_t=0.03993;   % mass (kg)aD=1;          % radial immersion ratio a/Dup_or_down=-1;      % 1: up-milling,-1: down-millingif up_or_down==1    % up_milling    fist=0;         % start angle    fiex=acos(1-2*aD);     % exit angleelseif up_or_down==-1      % down-milling    fist=acos(2*aD-1);     % start angle    fiex=pi;               % exit angleendstx=200;                   % steps of spindle speedsty=100;                   % steps of depth of cutw_st=0e-3;                 % starting depth of cutw_fi=4e-3;                 % final depth of cuto_st=5e3;                  % starting spindle speedo_fi=7.5e3;                % final spindle speed% the computional parametersm=40;           % number of discretization interval of the operation periodD=zeros(m+3,m+3);   % matrix Dd=ones(m+2,1);    d(1:2)=0;D=D+diag(d,-1);D(3,1)=1;% Dsicretization of the specific cutting force coefficient h(t)for i=1:m+1    dtr=2*pi/N/m;   % ¦¤t    h(i)=0;                  for j=1:N       % loop for tooth j        fi=i*dtr+(j-1)*2*pi/N;        if (fi>=fist)*(fi<=fiex)            g=1;    % tooth is in the cut        else            g=0;    % tooth is out of cut        end        h(i)=h(i)+g*(Kt*cos(fi)+Kn*sin(fi))*sin(fi);    endend%----------Begin of the previous 2nd-FDM------------------A=[-zeta*w0,1/m_t;...    m_t*((zeta*w0)^2-w0^2),-zeta*w0];     I=eye(size(A));invA=inv(A);% start of computation for x=2:stx+1                     % sweeping spindle speeds    o=o_st+(x-1)*(o_fi-o_st)/stx;     % the spindle speed ¦¸    T=60/o/N;                         % time delay    tau=T/m;                          % time step    %-----------Calculation of ¦µ0,¦µ1,¦µ2,¦µ3,¦µ4-------------    Fi0=expm(A*tau);                           Fi1=invA*(Fi0-I);                          Fi2=invA*(Fi0*tau-Fi1);                   Fi3=invA*(Fi0*tau^2-2*Fi2);                Fi4=invA*(Fi0*tau^3-3*Fi3);                %------The end of calculation of ¦µ0,¦µ1,¦µ2,¦µ3,¦µ4--------    for y=1:sty+1                      % sweeping depth of cut        w=w_st+(y-1)*(w_fi-w_st)/sty;  % the depth of cut        Fi=eye(m+3,m+3);               % construct transition matrix Fi        for i=1:m            B0k=[0 0;-w*h(i+1) 0];                                  B1k=[0 0;w*(h(i+1)-h(i))/tau 0];                          Fkp1=(Fi1-3*Fi2/(2*tau)+Fi3/(2*tau^2))*B0k+...                (Fi2-3*Fi3/(2*tau)+Fi4/(2*tau^2))*B1k;     % Fk+1             F0k=(2*Fi2/tau-Fi3/tau^2)*B0k+...                (2*Fi3/tau-Fi4/tau^2)*B1k;                 % F0,k             Fkm1=(Fi3/(2*tau^2)-Fi2/(2*tau))*B0k+...                (Fi4/(2*tau^2)-Fi3/(2*tau))*B1k;           % Fk-1            invImFkp1=inv(I-Fkp1);                         % [I-Fk+1]^£¨-1£©            D(1:2,1:2)=invImFkp1*(Fi0+F0k);                            D(1:2,3:3)=invImFkp1*Fkm1(1:2,1:1);            %--The updated codes to realize the quadratic polynimials 			%         interpolation for delayed state items----------            D(1:2,m+1)=-invImFkp1*Fkp1(1:2,1:1);            D(1:2,m+2)=-invImFkp1*F0k(1:2,1:1);            D(1:2,m+3)=-invImFkp1*Fkm1(1:2,1:1);            Fi=D*Fi;			%--------------------------------------------------------        end        ss(x,y)=o;                     % matrix of spindle speeds        dc(x,y)=w;                     % matrix of depth of cut        ei(x,y)=max(abs(eig(Fi)));     % matrix of eigenvalues    end    stx+1-xend%-----------The end of the previous 2nd-FDM-------------toccontour(ss,dc,ei,[1,1],'r-','linewidth',1.5);xlabel('\Omega(rpm)');ylabel('w(m)');xlim([5000,7500]);title('m=40');